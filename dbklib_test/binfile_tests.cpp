/*
#include "dbklib\binfile.h"
#include <string>
#include <filesystem>
#include <vector>





int whatwhat() {
	std::string fn {"..\\..\\dbklib_test\\test_materials\\test.mid"};
	std::filesystem::path fp(fn);
	if (fp.string() != fn) {
		return -1;
	}
	return 0;
}

*/




#include "gtest/gtest.h"
#include "dbklib\binfile.h"
#include <string>
#include <filesystem>
#include <vector>


TEST(binfileTests, midiFileTest) {
	std::string fn {"..\\..\\dbklib_test\\test_materials\\test.mid"};
	auto bf = dbk::readfile(fn);
	EXPECT_EQ(bf.file.string(),fn);

	int ans_file_nbytes = 4946;
	EXPECT_EQ(bf.d.size(),ans_file_nbytes);

	std::vector<unsigned char> first16 {0x4D, 0x54, 0x68, 0x64, 0x00, 
		0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x02, 0x01, 0x80, 0x4D, 0x54};
	for (int i=0; i<first16.size(); ++i) {
		EXPECT_EQ(bf.d[i],first16[i]);
	}

	std::vector<unsigned char> offset2656 {0x00, 0x90, 0x3E, 0x5A, 0x83, 
		0x00, 0x90, 0x34, 0x00, 0x00, 0x90, 0x3B,0x00, 0x00, 0x90, 0x3E};
	for (int i=0; i<offset2656.size(); ++i) {
		EXPECT_EQ(bf.d[2656+i],offset2656[i]);
	}

	std::vector<unsigned char> last18 {0x5A, 0x00, 0x90, 0x30, 0x5A, 0x83,
		0x00, 0x90, 0x3C, 0x00, 0x00, 0x90,	0x30, 0x00, 0x00, 0xFF, 0x2F,
		0x00};
	for (int i=0; i<last18.size(); ++i) {
		EXPECT_EQ(bf.d[ans_file_nbytes-last18.size()+i],last18[i]);
	}

}


TEST(binfileTests, emptyFileNoExtension) {
	std::string fn {"..\\..\\dbklib_test\\test_materials\\empty_file"};
	auto bf = dbk::readfile(fn);
	EXPECT_EQ(bf.file.string(),fn);

	int ans_file_nbytes = 0;
	EXPECT_EQ(bf.d.size(),ans_file_nbytes);

}


TEST(binfileTests, emptyFileTxtExtension) {
	std::string fn {"..\\..\\dbklib_test\\test_materials\\empty_file.txt"};
	auto bf = dbk::readfile(fn);
	EXPECT_EQ(bf.file.string(),fn);

	int ans_file_nbytes = 0;
	EXPECT_EQ(bf.d.size(),ans_file_nbytes);

}


TEST(binfileTests, txtFile) {
	std::string fn {"..\\..\\dbklib_test\\test_materials\\txt_file.txt"};
	auto bf = dbk::readfile(fn);
	EXPECT_EQ(bf.file.string(),fn);

	int ans_file_nbytes = 120;
	EXPECT_EQ(bf.d.size(),ans_file_nbytes);

	std::vector<unsigned char> contents {
		0x49, 0x20, 0x66, 0x6F, 0x75, 0x6E, 0x64, 0x20, 0x6F, 0x6E, 0x65, 0x20,
		0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x70, 0x6F, 0x6F, 0x6E,
		0x73, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x6E,
		0x6B, 0x20, 0x62, 0x75, 0x74, 0x20, 0x69, 0x20, 0x63, 0x6F, 0x75, 0x6C,
		0x64, 0x6E, 0x27, 0x74, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x74, 0x65, 0x20,
		0x74, 0x68, 0x65, 0x20, 0x6F, 0x74, 0x68, 0x65, 0x72, 0x20, 0x74, 0x77,
		0x6F, 0x2C, 0x20, 0x73, 0x6F, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x20,
		0x77, 0x61, 0x6C, 0x6B, 0x73, 0x20, 0x6F, 0x66, 0x66, 0x20, 0x77, 0x65,
		0x20, 0x6D, 0x69, 0x67, 0x68, 0x74, 0x20, 0x62, 0x65, 0x20, 0x73, 0x70,
		0x6F, 0x6F, 0x6E, 0x6C, 0x65, 0x73, 0x73, 0x2E, 0x20, 0x20, 0x0D, 0x0A
	};

	for (int i=0; i<contents.size(); ++i) {
		EXPECT_EQ(contents[i],bf.d[i]);
	}

}




